data(salivaSimData)
dim(simCounts)
saliva.counts <- simCounts
saliva.group <- rep("Saliva", ncol(saliva.counts))
mrgData <- mergeDatasets(list(stool.counts, saliva.counts),
list(stool.group, saliva.group))
all.counts <- mrgData$data
dim(all.counts)
length(union(rownames(stool.counts),rownames(saliva.counts)))
all.group <- mrgData$group
all.adiv <- aindex(all.counts,
method = "Hill", q = 2,
group = all.group)
all.bdiv <- bindex(all.counts,
method = "w",
group = all.group)
diversity<-all.adiv
has2groups<-(ngroups==2)
diversity.tab<-data.frame(unlist(diversity))
str<-c()
for (i in 1:length(diversity)) {
str<-c(str, rep(names(diversity)[i],length(diversity[[i]])))
}
diversity.tab$group<-as.factor(str)
colnames(diversity.tab)[1]<-"data"
shapiro.test.pval<-rep(NA,ngroups)
source('~/Dropbox/MyRPackage/DivSeq/R/divStats.R')
p1<-t.test(diversity[[1]], diversity[[2]])$p.value
pv<-var.test(diversity[[1]], diversity[[2]])$p.value
t.test(diversity[[1]], diversity[[2]], var.equal=FALSE)
aov(data~group, diversity.tab)
aov(data~group, diversity.tab, var.equal=FALSE)
wilcox.test(diversity[[1]], diversity[[2]], var.equal=FALSE)
kruskal.test(diversity, var.equal=FALSE)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH")
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH", var.equal=FALSE)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH", var.equaldsad=FALSE)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH", var.equal=FALSE)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH", var.equal=TRUE)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH", var.equal=TRUE)
posthoc.kruskal.nemenyi.test
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust="BH")
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="BH")
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="fdr")
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="fdr")
debug(posthoc.kruskal.nemenyi.test)
posthoc.kruskal.nemenyi.test(data~group,
data=diversity.tab,
p.adjust.method="fdr")
dunnTest
undebug(posthoc.kruskal.nemenyi.test)
install.packages("FSA")
kruskal.test(diversity)
kruskal.test(diversity, var.equal=FALSE)
help(pairwise.wilcox.test)
pairwise.wilcox.test(diversity.tab$data,
diversity.tab$group,
p.adjust.method="BH")
library(DivSeq)
setwd("~/Dropbox/MyRPackage/Vignette")
library("DivSeq")
data(stoolSimData)
stool.counts <- simCounts
stool.group <- rep("Stool", ncol(stool.counts))
data(salivaSimData)
saliva.counts <- simCounts
saliva.group <- rep("Saliva", ncol(saliva.counts))
mrgData <- mergeDatasets(list(stool.counts, saliva.counts),
list(stool.group, saliva.group))
all.counts <- mrgData$data
all.group <- mrgData$group
all.adiv <- aindex(all.counts,
method = "Hill", q = 2,
group = all.group)
all.bdiv <- bindex(all.counts,
method = "w",
group = all.group)
shapiro.test(all.adiv[[1]])
shapiro.test(all.adiv[[2]])
shapiro.test(rnorm(100))
shapiro.test(runif(100))
shapiro.test(all.bdiv[[2]])
shapiro.test(all.bdiv[[1]])
shapiro.test(all.bdiv[["Stool"]])
shapiro.test(all.bdiv[["Saliva"]])
shapiro.test(all.adiv[["Saliva"]])
shapiro.test(all.bdiv[["Saliva"]])
all.bdiv <- bindex(all.counts,
method = "cc",
group = all.group)
shapiro.test(all.bdiv[["Saliva"]])
shapiro.test(all.bdiv[["Stool"]])
all.bdiv <- bindex(all.counts,
method = "r",
group = all.group)
shapiro.test(all.bdiv[["Saliva"]])
shapiro.test(all.bdiv[["Stool"]])
all.bdiv <- bindex(all.counts,
method = "w",
group = all.group)
shapiro.test(all.bdiv[["Saliva"]])
shapiro.test(all.bdiv[["Stool"]])
help(ks.test)
range(stool.sdepth)
data(stoolSimData)
stool.avgAbundances<-avgAbundances
stool.phi<-phi
stool.sdepth<-sdepth
range(stool.sdepth)
library(DivSeq)
i<-NULL
datasets<-NULL
if (!is.list(datasets)) {
stop("'datasets' must be a list")
}
library(DivSeq)
install.packages("~/Dropbox/MyRPackage/DivSeq_0.0.1.tar.gz", repos = NULL, type = "source")
divPlot(stool.adiv, main = "Alpha diversity (Hill, q=2)", jitter = TRUE)
library(DivSeq)
data(stoolSimData)dim(simCounts)
stool.adiv <- aindex(simCounts,    index = "Shannon",    group = stool.group)
data(stoolSimData)
stool.counts <- simCounts
stool.group <- rep("Stool", ncol(stool.counts))
data(salivaSimData)
saliva.counts <- simCounts
saliva.group <- rep("Saliva", ncol(saliva.counts))
mrgData <- mergeDatasets(list(stool.counts, saliva.counts),
list(stool.group, saliva.group))
all.counts <- mrgData$data
all.group <- mrgData$group
all.adiv <- aindex(all.counts,
method = "Hill", q = 2,
group = all.group)
data(stoolSimData)
stool.counts <- simCounts
stool.group <- rep("Stool", ncol(stool.counts))
data(salivaSimData)
saliva.counts <- simCounts
saliva.group <- rep("Saliva", ncol(saliva.counts))
mrgData <- mergeDatasets(list(stool.counts, saliva.counts),
list(stool.group, saliva.group))
all.counts <- mrgData$data
all.group <- mrgData$group
all.adiv <- aindex(all.counts,
index = "Hill", q = 2,
group = all.group)
plotDiv(all.adiv)
divPlot(all.adiv)
divPlot(all.adiv, points=TRUE)
library(DivSeq)
a<-TRUE
class(a)
is.logical(1)
is.logical(a)
is.color("black")
pch(1,1,col=1)
plot(1,1,col=1)
plot(1,1,col=14755)
plot(1,1,col=147.55)
plot(1,1,col="lkhd")
isColor2 <- function(x)
{
return(x%in%colors() | grepl("^#(\\d|[a-f]){6,8}$",x,ignore.case=TRUE))
}
isColor2("white")
isColor2(1)
is.character("")
is.character("Dn")
help(DivSeq-package)
help(DivSeq)
library(DivSeq)
help(DivSeq)
help(DEseq2)
library(DEseq2)
library(DEseq)
library(DESeq)
library(DESeq2)
help(DEseq)
help(DEseq2)
library(DESeq2)
help(DESeq2)
help("DESeq2-package")
??DESeq2
help(DESeq)
help(results)
library(DivSeq)
qD
library(DivSeq)
qD
help(t.test)
help(cor)
library(DivSeq)
data(salivaSimData)
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2)
bdiv <- bindex(simCounts, index = "w", group = group)
divPlot(bdiv)
library(DivSeq)
data(salivaSimData)
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
bdiv <- bindex(simCounts, index = "w", group = group)
divPlot(bdiv)
divPlot(bdiv, palette="default")
divPlot(bdiv, col="default")
# Load package and data sets
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute beta diversity with Whittaker index
bdiv <- bindex(simCounts, index = "w", group = group)
# Plot diversity
divPlot(bdiv, col="default")
# Load package and data set
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute alpha diversity with Hill numbers of order 2
adiv <- bindex(simCounts, index = "Hill", q=2, group = group)
# Plot diversity
divPlot(adiv, col="default")
# Load package and data set
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute alpha diversity with Hill numbers of order 2
adiv <- aindex(simCounts, index = "Hill", q=2, group = group)
# Plot diversity
divPlot(adiv, col="default")
# Load package and data set
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute alpha diversity with Hill numbers of order 2
adiv <- aindex(simCounts, index = "Hill", q=2, group = group)
# Plot diversity
divPlot(adiv, col="default")
# Load package and simulation parameters
library(DivSeq)
data(salivaSimData)
# Simulate a new data set
newsimdata <- simulatecounts(avgAbund = avgAbundances, phi, sdepth)
newcounts<-newsimdata$counts
newabundances<-newsimdata$abundances
dim(newabundances)
head(newabundances)
dim(newcounts)
head(newcounts)
source('~/Dropbox/MyRPackage/DivSeq/R/simulatecounts.R')
# Load package and simulation parameters
library(DivSeq)
data(salivaSimData)
# Simulate a new data set
newsimdata <- simulatecounts(avgAbund = avgAbundances, phi, sdepth)
newcounts<-newsimdata$counts
newabundances<-newsimdata$abundances
library(DivSeq)
head(newabundances)
head(newcounts)
source('~/Dropbox/MyRPackage/DivSeq/R/simulatecounts.R')
help(par)
# Load package and data set
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute alpha diversity with Hill numbers of order 2
adiv <- aindex(simCounts, index = "Hill", q=2, group = group)
# Plot diversity
divPlot(adiv)
divPlot(adiv, points = TRUE, cexpoints = 0.8)
divPlot(adiv, col = "default", las = 2)
divPlot(adiv, col = c("#4682B4","#FFD700"),
main = "Hill diversity (q=2)", ylab = "Number equivalents")
library(DivSeq)
data(salivaSimData)
# Assign samples to 2 groups
group <- c(rep("group1", ncol(simCounts)/2), rep("group2", ncol(simCounts)/2))
# Compute alpha diversity with Hill numbers of order 2
adiv <- aindex(simCounts, index = "Hill", q=2, group = group)
# Plot diversity
divPlot(adiv)
divPlot(adiv, points = TRUE, cexpoints = 0.8)
divPlot(adiv, col = "default", las = 2)
library(DivSeq)
data(salivaSimData)
# Compute alpha diversity
alphadiv <- aindex(simCounts, index = "Richness")
divPlot(alphadiv)
# Compute beta diversity
betadiv <- bindex(simCounts, index = "r")
# Plot beta diversity
divPlot(betadiv, col = "default")
library(DivSeq)
help(cars)
help(mergedatasets)
help(cars)
help(boxplot)
help(barplot)
help(cars)
help(iris)
library(DivSeq)
setwd("~/Dropbox/MyRPackage/DivSeq")
library(DivSeq)
install.packages("https://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
setwd("~/Dropbox/MyRPackage/Vignette")
help(bindex)
help(aindex)
library(DivSeq)
library(DESeq2)
vignette(DEseq)
library(DivSeq)
help(aindex)
help(bindex)
library(DivSeq)
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",    repos = NULL, type = "source")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
install.packages("http://goo.gl/VwAcHO/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
setwd("~/Dropbox/MyRPackage/Vignette")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, dependencies=TRUE)
library(DivSeq)
library(vegan)
help(vegan)
version(vegan)
remove.package(vegan)
remove.packages(vegan)
remove.packages("vegan")
remove.packages("vegan", lib=NULL)
help(remove.packages)
install.packages(vegan)
install.packages("vegan")
library(vegan)
setwd("~/Dropbox/MyRPackage/DivSeq")
install.packages("vegan")
library(DivSeq)
help(import)
help(importFrom)
??import
??importFrom
library(utils)
mdacc <- local({
rvers <- getRversion()
repos.hostname <-"bioinformatics.mdanderson.org"
sprintf("http://%s/OOMPA/%s",
repos.hostname,
paste(rvers$maj, rvers$min, sep="."))
})
help(utils)
mdacc
library(DivSeq)
library(Vegan)
library(vegan)
estimateR
install(vegan, repository=NULL)
install.packages(vegan, repository=NULL)
install.packages("vegan", repository=NULL)
install.packages("vegan", repository = NULL)
install.packages("vegan", repository = CRAN)
install.packages("vegan")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
rtype = "source", dependencies = TRUE)
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source", dependencies = TRUE)
library(DivSeq)
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source", dependencies = TRUE)
sessionInfo()
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source")
sessionInfo()
install("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source")
library(devtools)
install.packages("devtools")
install("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source")
library(devtools)
install("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz", type = "source")
install.packages("vegan")
library(DivSeq)
install.packages("vegan")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DivSeq_1.0.tar.gz",
repos = NULL, type = "source")
install.packages("vegan")
help(install.packages)
install.packages("vegan", repos = "http://cran.us.r-project.org")
library(DiversitySeq)
a<-matrix(c(2,3,4,5),nrow=2)
rownames(a)
library("dfhah")
setwd("~/Dropbox/MyRPackage/DiversitySeq")
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindex.R')
simCounts
data(stoolSimData)
dindex(simCounts, index="W")
dindex(simCounts, index="w")
bindex(simCounts, index="w")
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindexXY.R')
bindex(simCounts, index="w")
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindex.R')
bindex(simCounts, index="w")
colnames(simCounts)[1]<-"A"
bindex(simCounts, index="w")
head(bindex(simCounts, index="w"))
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindex.R')
bindex(simCounts, index="w")
head(bindex(simCounts, index="w"))
library(DiversitySeq)
setwd("~/Dropbox/MyRPackage/DiversitySeq")
library(DiversitySeq)
stool.counts <- simCounts
data(stoolSimData)
stool.counts <- simCounts
stool.adiv <- aindex(stool.counts,    index = "Shannon")
stool.adiv<-index(stool.counts, index = "Shannon")
stool.adiv<-aindex(stool.counts, index = "Shannon")
names(stool.adiv)
help(adiv)
adiv
library(DiversitySeq)
data(stoolSimData)
stool.counts <- simCounts
stool.adiv <- aindex(stool.counts,
index = "Shannon")
bxoplot(stool.adiv)
boxplot(stool.adiv)
names(stool.adiv)
nameS(stool.adiv[[1]])
names(stool.adiv[[1]])
stool.bdiv <- bindex(stool.counts,
index = "w",
group = stool.group)
stool.group <- rep("Stool", ncol(stool.counts))
names(stool.bdiv[[1]])
stool.bdiv <- bindex(stool.counts,
index = "w",
group = stool.group)
names(stool.bdiv[[1]])
stool.bdiv
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DiversitySeq_1.0.tar.gz",
repos = NULL, type = "source")
install.packages("http://www.dei.unipd.it/~finotell/it34w87tgjrsdiq4y58o/DiversitySeq_1.0.tar.gz",
repos = NULL, type = "source")
library(DiversitySeq)
stool.bdiv <- bindex(stool.counts,
index = "w",
group = stool.group)
names(stool.bdiv[[1]])
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindex.R')
stool.bdiv <- bindex(stool.counts,
index = "w",
group = stool.group)
source('~/Dropbox/MyRPackage/DiversitySeq/R/bindexXY.R')
stool.bdiv <- bindex(stool.counts,
index = "w",
group = stool.group)
names(stool.bdiv[[1]])
library(DiversitySeq)
setwd("~/Dropbox/MyRPackage/DiversitySeq")
install.packages("http://sysbiobig.dei.unipd.it/uzzxd53435/DiversitySeq_1.0.tar.gz",
repos = NULL, type = "source")
library("DiversitySeq")
help(DivSeq)
help(DivesritySeq)
help(aindex)
help(bindex)
help(mergedatasets)
setwd("C:/Users/q035ff/Dropbox/MyRPackage/DiversitySeq")
library(DiversitySeq)
install.packages("Rtools")
librray(Rtools)
library(Rtools)
install.packages("Rtools")
library(Rtools)
setwd("C:/Users/q035ff/Dropbox/MyRPackage/DiversitySeq")
source('C:/Users/q035ff/Dropbox/MyRPackage/DiversitySeq/R/aindex.R')
aindex(c(29, 378, 23487, 12, 2), method="Hill", q=Inf)
aindex(c(29, 378, 23487, 12, 2), index="Hill", q=Inf)
source('C:/Users/q035ff/Dropbox/MyRPackage/DiversitySeq/R/qD.R')
aindex(c(29, 378, 23487, 12, 2), index="Hill", q=Inf)
aindex(c(29, 378, 23487, 12, 2), index="BergerParker")
1/aindex(c(29, 378, 23487, 12, 2), index="BergerParker")
install.packages("http://sysbiobig.dei.unipd.it/uzzxd53435/DiversitySeq_1.0.tar.gz",
repos = NULL, type = "source")
1/aindex(c(29, 378, 23487, 12, 2), index="BergerParker")
aindex(c(29, 378, 23487, 12, 2), index="Hill", q=Inf)
